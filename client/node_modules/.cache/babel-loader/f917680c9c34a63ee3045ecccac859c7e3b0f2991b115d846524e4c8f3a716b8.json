{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nishi\\\\Desktop\\\\Agriculture\\\\client\\\\src\\\\components\\\\PlantDiseaseUpload.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/PlantDiseaseUpload.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlantDiseaseUpload() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [prediction, setPrediction] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const handleUpload = async () => {\n    if (!file) return;\n    const formData = new FormData();\n    formData.append('file', file);\n    setLoading(true);\n    try {\n      const res = await axios.post('http://localhost:5000/predict', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setPrediction(res.data.prediction);\n    } catch (err) {\n      console.error(err);\n      setPrediction(\"Error predicting disease\");\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Plant Disease Detection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => setFile(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload & Predict\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 19\n    }, this), prediction && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Prediction: \", prediction]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(PlantDiseaseUpload, \"qivgZqLaYkERS6Xs2ioMcx6nu3M=\");\n_c = PlantDiseaseUpload;\nexport default PlantDiseaseUpload;\nvar _c;\n$RefreshReg$(_c, \"PlantDiseaseUpload\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","PlantDiseaseUpload","_s","file","setFile","prediction","setPrediction","loading","setLoading","handleUpload","formData","FormData","append","res","post","headers","data","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","files","onClick","_c","$RefreshReg$"],"sources":["C:/Users/nishi/Desktop/Agriculture/client/src/components/PlantDiseaseUpload.js"],"sourcesContent":["// frontend/src/components/PlantDiseaseUpload.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction PlantDiseaseUpload() {\n  const [file, setFile] = useState(null);\n  const [prediction, setPrediction] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const handleUpload = async () => {\n    if (!file) return;\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    setLoading(true);\n    try {\n      const res = await axios.post('http://localhost:5000/predict', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' }\n      });\n      setPrediction(res.data.prediction);\n    } catch (err) {\n      console.error(err);\n      setPrediction(\"Error predicting disease\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"upload-form\">\n      <h2>Plant Disease Detection</h2>\n      <input type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n      <button onClick={handleUpload}>Upload & Predict</button>\n\n      {loading && <p>Loading...</p>}\n      {prediction && <h3>Prediction: {prediction}</h3>}\n    </div>\n  );\n}\n\nexport default PlantDiseaseUpload;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMY,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACN,IAAI,EAAE;IAEX,MAAMO,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAET,IAAI,CAAC;IAE7BK,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMK,GAAG,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,+BAA+B,EAAEJ,QAAQ,EAAE;QACtEK,OAAO,EAAE;UAAE,cAAc,EAAE;QAAsB;MACnD,CAAC,CAAC;MACFT,aAAa,CAACO,GAAG,CAACG,IAAI,CAACX,UAAU,CAAC;IACpC,CAAC,CAAC,OAAOY,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBX,aAAa,CAAC,0BAA0B,CAAC;IAC3C;IACAE,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,oBACER,OAAA;IAAKoB,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1BrB,OAAA;MAAAqB,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChCzB,OAAA;MAAO0B,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAGC,CAAC,IAAKxB,OAAO,CAACwB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClEzB,OAAA;MAAQ+B,OAAO,EAAEtB,YAAa;MAAAY,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAEvDlB,OAAO,iBAAIP,OAAA;MAAAqB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAC5BpB,UAAU,iBAAIL,OAAA;MAAAqB,QAAA,GAAI,cAAY,EAAChB,UAAU;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV;AAACvB,EAAA,CAlCQD,kBAAkB;AAAA+B,EAAA,GAAlB/B,kBAAkB;AAoC3B,eAAeA,kBAAkB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}